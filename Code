# Install required libraries
!pip install -q kaggle prophet pmdarima

# Upload kaggle.json for Kaggle API access
from google.colab import files
files.upload()  # Select the kaggle.json file from your local machine

# Move kaggle.json to the correct location
!mkdir -p ~/.kaggle
!mv kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

# Download dataset from Kaggle
!kaggle datasets download -d joebeachcapital/global-earth-temperatures
!unzip -o global-earth-temperatures.zip

# Import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.tsa.arima.model import ARIMA
from prophet import Prophet
from sklearn.metrics import mean_squared_error
from statsmodels.tsa.seasonal import seasonal_decompose
from pmdarima import auto_arima

# Load and clean the dataset
data = pd.read_csv('Global Temperatures.csv')
data.columns = data.columns.str.strip()  # Clean column names
data = data.apply(pd.to_numeric, errors='coerce')  # Convert all columns to numeric

# Combine Year and Month into a datetime column and set it as index
data['Date'] = pd.to_datetime(data['Year'].astype(str) + '-' + data['Month'].astype(str) + '-01')
data.set_index('Date', inplace=True)
data.drop(columns=['Year', 'Month'], inplace=True)

# Display cleaned data summary
print(data.head())
print(data.info())

# Exploratory Data Analysis (EDA): Global Temperature Anomalies Over Time
plt.figure(figsize=(14, 7))
plt.plot(data['Annual Anomaly'], label='Annual Anomaly')
plt.plot(data['Five-year Anomaly'], label='5-Year Anomaly', linestyle='--')
plt.plot(data['Ten-year Anomaly'], label='10-Year Anomaly', linestyle=':')
plt.title('Global Temperature Anomalies Over Time')
plt.xlabel('Year')
plt.ylabel('Temperature Anomaly (°C)')
plt.legend()
plt.grid(True, linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

# Monthly Mean Temperature Anomalies Heatmap
data['Year'] = data.index.year
data['Month'] = data.index.month
monthly_avg_anomaly = data.pivot_table(index='Year', columns='Month', values='Annual Anomaly', aggfunc='mean')

plt.figure(figsize=(14, 6))
sns.heatmap(monthly_avg_anomaly, cmap='coolwarm', cbar_kws={'label': 'Temperature Anomaly (°C)'}, annot=False)
plt.title('Monthly Average Temperature Anomalies')
plt.xlabel('Month')
plt.ylabel('Year')
plt.tight_layout()
plt.show()

# Time Series Decomposition (Annual Anomaly)
decomposition = seasonal_decompose(data['Annual Anomaly'].dropna(), model='additive', period=12)
decomposition.plot()
plt.suptitle('Seasonal Decomposition of Annual Temperature Anomaly', y=1.02)
plt.tight_layout()
plt.show()

# Train-Test Split for Modeling
train = data['Annual Anomaly'][:'2000']
test = data['Annual Anomaly']['2001':]

# ARIMA Model: Finding Optimal Parameters
arima_model = auto_arima(train.dropna(), seasonal=True, m=12)
print(arima_model.summary())

# Fit ARIMA Model
arima_model = ARIMA(train.dropna(), order=arima_model.order, seasonal_order=arima_model.seasonal_order)
arima_result = arima_model.fit()

# Forecast with ARIMA
arima_forecast = arima_result.forecast(steps=len(test))
plt.figure(figsize=(14, 7))
plt.plot(train, label='Train')
plt.plot(test, label='Test')
plt.plot(test.index, arima_forecast, label='ARIMA Forecast', linestyle='--')
plt.title('ARIMA Forecast of Temperature Anomaly')
plt.xlabel('Year')
plt.ylabel('Temperature Anomaly (°C)')
plt.legend()
plt.grid(True, linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

# Evaluate ARIMA Model
arima_rmse = np.sqrt(mean_squared_error(test, arima_forecast))
print(f'ARIMA RMSE: {arima_rmse:.4f}')

# Prophet Model
prophet_data = data.reset_index()[['Date', 'Annual Anomaly']].rename(columns={'Date': 'ds', 'Annual Anomaly': 'y'})
prophet_model = Prophet()
prophet_model.fit(prophet_data)

# Forecasting with Prophet
future_dates = prophet_model.make_future_dataframe(periods=120, freq='M')
prophet_forecast = prophet_model.predict(future_dates)

# Plot Prophet Forecast
plt.figure(figsize=(14, 7))
prophet_model.plot(prophet_forecast)
plt.title('Prophet Forecast of Temperature Anomaly')
plt.xlabel('Year')
plt.ylabel('Temperature Anomaly (°C)')
plt.tight_layout()
plt.show()

# Evaluate Prophet Model
prophet_rmse = np.sqrt(mean_squared_error(test, prophet_forecast[-len(test):]['yhat']))
print(f'Prophet RMSE: {prophet_rmse:.4f}')

# Comparison of ARIMA and Prophet Predictions
plt.figure(figsize=(14, 7))
plt.plot(test, label='Actual Anomaly')
plt.plot(test.index, arima_forecast, label='ARIMA Forecast', linestyle='--')
plt.plot(test.index, prophet_forecast[-len(test):]['yhat'], label='Prophet Forecast', linestyle=':')
plt.title('Comparison of ARIMA and Prophet Forecasts')
plt.xlabel('Year')
plt.ylabel('Temperature Anomaly (°C)')
plt.legend()
plt.grid(True, linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

