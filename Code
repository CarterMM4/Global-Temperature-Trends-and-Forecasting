# Install required libraries
!pip install -q kaggle
!pip install -q prophet
!pip install -q pmdarima

# Upload kaggle.json
from google.colab import files
files.upload()  # Select the kaggle.json file from your local machine

# Move kaggle.json to the correct location
!mkdir -p ~/.kaggle
!mv kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

# Download dataset from Kaggle
!kaggle datasets download -d joebeachcapital/global-earth-temperatures
!unzip -o global-earth-temperatures.zip

# Import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.tsa.arima.model import ARIMA
from prophet import Prophet
from sklearn.metrics import mean_squared_error
from statsmodels.tsa.seasonal import seasonal_decompose

# Load Dataset
data = pd.read_csv('Global Temperatures.csv')

# Clean column names by stripping whitespace
data.columns = data.columns.str.strip()

# Convert relevant columns to numeric, coerce errors to NaN
for col in data.columns:
    data[col] = pd.to_numeric(data[col], errors='coerce')

# Combine Year and Month into a datetime column and set as index
data['Date'] = pd.to_datetime(data['Year'].astype(str) + '-' + data['Month'].astype(str) + '-01')
data.set_index('Date', inplace=True)
data.drop(columns=['Year', 'Month'], inplace=True)

# Display the cleaned data to verify
print(data.head())
print(data.info())

# Exploratory Data Analysis (EDA)
plt.figure(figsize=(14, 7))
plt.plot(data['Annual Anomaly'], label='Annual Anomaly')
plt.plot(data['Five-year Anomaly'], label='Five-Year Anomaly', linestyle='--')
plt.plot(data['Ten-year Anomaly'], label='Ten-Year Anomaly', linestyle=':')
plt.title('Global Temperature Anomalies Over Time')
plt.xlabel('Date')
plt.ylabel('Temperature Anomaly (°C)')
plt.legend()
plt.show()

# Monthly Mean Temperature Anomalies
data['Year'] = data.index.year
data['Month'] = data.index.month
monthly_avg_anomaly = data.groupby(['Year', 'Month'])['Annual Anomaly'].mean().unstack()

plt.figure(figsize=(14, 6))
sns.heatmap(monthly_avg_anomaly, cmap='coolwarm', cbar_kws={'label': 'Temperature Anomaly (°C)'})
plt.title('Monthly Average Temperature Anomalies')
plt.xlabel('Month')
plt.ylabel('Year')
plt.show()

# Time Series Decomposition
decomposition = seasonal_decompose(data['Annual Anomaly'].dropna(), model='additive', period=12)
decomposition.plot()
plt.show()

# Feature Engineering
data['Decade'] = (data['Year'] // 10) * 10
data['Anomaly_Diff'] = data['Annual Anomaly'] - data['Annual Anomaly'].mean()

# Train-Test Split
train = data['Annual Anomaly'][:'2000']
test = data['Annual Anomaly']['2001':]

# ARIMA Model
from pmdarima import auto_arima

# Determine optimal ARIMA parameters
arima_model = auto_arima(train.dropna(), seasonal=True, m=12)
print(arima_model.summary())

# Fit ARIMA model
arima_model = ARIMA(train.dropna(), order=arima_model.order, seasonal_order=arima_model.seasonal_order)
arima_result = arima_model.fit()

# Forecast
arima_forecast = arima_result.forecast(steps=len(test))
plt.plot(train, label='Train')
plt.plot(test, label='Test')
plt.plot(test.index, arima_forecast, label='ARIMA Forecast')
plt.legend()
plt.show()

# Evaluate ARIMA
arima_rmse = np.sqrt(mean_squared_error(test, arima_forecast))
print(f'ARIMA RMSE: {arima_rmse}')

# Prophet Model
prophet_data = data.reset_index()[['Date', 'Annual Anomaly']]
prophet_data.columns = ['ds', 'y']  # Prophet expects columns to be 'ds' for date and 'y' for target

# Train Prophet model
prophet_model = Prophet()
prophet_model.fit(prophet_data)

# Forecasting with Prophet
future_dates = prophet_model.make_future_dataframe(periods=120, freq='M')
prophet_forecast = prophet_model.predict(future_dates)

# Plot Prophet Forecast
fig = prophet_model.plot(prophet_forecast)
plt.show()

# Evaluate Prophet
prophet_rmse = np.sqrt(mean_squared_error(test, prophet_forecast[-len(test):]['yhat']))
print(f'Prophet RMSE: {prophet_rmse}')

# Comparison of ARIMA and Prophet predictions
plt.figure(figsize=(14, 7))
plt.plot(test, label='Actual Anomaly')
plt.plot(test.index, arima_forecast, label='ARIMA Forecast')
plt.plot(test.index, prophet_forecast[-len(test):]['yhat'], label='Prophet Forecast', linestyle='--')
plt.title('Comparison of ARIMA and Prophet Forecasts')
plt.xlabel('Date')
plt.ylabel('Temperature Anomaly (°C)')
plt.legend()
plt.show()

